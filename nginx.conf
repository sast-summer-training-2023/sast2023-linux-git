# sudo nginx -c $(realpath ./nginx.conf)
user								root;
worker_processes					auto;
error_log							logs/error.log				warn;
pid									logs/nginx.pid;

events {
}

http {
	include							mime.types;
	default_type					application/octet-stream;

	log_format						main						'$remote_addr - $remote_user [$time_local] '
																'"$request" $status $body_bytes_sent '
																'"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

	access_log						logs/access.log				main;

	################################

	sendfile						on;
	tcp_nopush						on;
	tcp_nodelay						on;

	gzip							on;
	gzip_min_length					2048;
	gzip_types						text/css text/csv text/jsx text/plain text/typescript text/tsx text/xml application/javascript application/json application/xml;
	gzip_vary						on;
	charset_types					text/css text/csv text/jsx text/plain text/typescript text/tsx text/xml application/javascript application/json application/xml;

	open_file_cache					max=1000 inactive=10s;
	open_file_cache_valid 			10s;
	open_file_cache_min_uses		9223372036854775807;
	open_file_cache_errors			on;

	charset							utf-8;

	################################

	# is simple request
	map $request_method $simple {
		GET							1;
		HEAD						1;
		default						0;
	}

	# is upgrade (websocket)
	map $http_upgrade $connection_upgrade {
		''							close;
		default						upgrade;
	}

	upstream backend {
		server						unix:/home/<username>/sast2023-linux-git/backend/backend.sock; # <------- change this !
	}

	server {
		listen						80;							# <------- may change
		listen						[::]:80;					# <------- may change

		add_header					Bonus4						'sast2023{http://headers}' always;

		root						dist;

		proxy_http_version			1.1;
		proxy_intercept_errors		on;
		proxy_set_header			Connection					$connection_upgrade;
		proxy_set_header			Upgrade						$http_upgrade;

		if ($simple = 0) {
			rewrite					^							/backend-internal last;
		}

		if ($http_upgrade) {
			rewrite					^							/backend-internal last;
		}

		location = / {
			try_files				/leaderboard.html			=404;
		}

		location = /flag {
			add_header				Bonus4						'sast2023{http://headers}' always;
			add_header				Content-Type				text/plain always;
			return					500 						'Ouch! The server does not work now. We recommend you to use 59.66.131.240:50001 as a HTTP proxy server.\n';
		}

		location = /backend-internal {
			internal;
			proxy_pass				http://backend$request_uri;
		}

		location ^~ /src/ {
			autoindex				on;
		}
	}

	# the following is used as a 'phony proxy' for Linux task #9.
	server {
		listen						81;							# <------- may change
		listen						[::]:81;					# <------- may change

		if ($raw_host != http://59.66.131.240:50000/flag) {
			return					400;
		}

		location = /flag {
			if ($raw_host = http://59.66.131.240:50000/flag) {
				add_header			Content-Type				text/plain always;
				return				200							'Here you come! The flag is sast2023{Be_CAREFUL_using_PROXIES}.\n';
			}
		}
	}
}
